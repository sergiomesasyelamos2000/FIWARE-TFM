{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 1,
  "id": 6,
  "links": [],
  "liveNow": true,
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "ddfnqgvmg1g5cd"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 3,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 17,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "timezone": [
          "Europe/Madrid"
        ],
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "ddfnqgvmg1g5cd"
          },
          "editorMode": "code",
          "format": "time_series",
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) as time,\n  COUNT(*) AS \"metric\"\nFROM\n  etlocationuser\n\nWHERE user_id IN ($user_id ) AND $__timeFilter(timestamp_sensor)\nGROUP BY\n  time\nORDER BY\n  time;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Serie temporal de lineas",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "ddfnqgvmg1g5cd"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "scaleDistribution": {
              "type": "linear"
            }
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 16,
      "options": {
        "calculate": true,
        "calculation": {
          "xBuckets": {
            "mode": "size",
            "value": ""
          },
          "yBuckets": {
            "scale": {
              "log": 2,
              "type": "log"
            }
          }
        },
        "cellGap": 1,
        "color": {
          "exponent": 0.5,
          "fill": "dark-orange",
          "mode": "scheme",
          "reverse": false,
          "scale": "exponential",
          "scheme": "Spectral",
          "steps": 64
        },
        "exemplars": {
          "color": "rgba(255,0,255,0.7)"
        },
        "filterValues": {
          "le": 1e-9
        },
        "legend": {
          "show": true
        },
        "rowsFrame": {
          "layout": "auto"
        },
        "tooltip": {
          "mode": "multi",
          "showColorScale": false,
          "yHistogram": false
        },
        "yAxis": {
          "axisLabel": "y",
          "axisPlacement": "left",
          "reverse": false,
          "unit": "none"
        }
      },
      "pluginVersion": "10.4.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "cdevgudbahypse"
          },
          "editorMode": "code",
          "format": "time_series",
          "rawQuery": true,
          "rawSql": "SELECT \n    x1, \n    x2, \n    y1, \n    y2, \n    SUM(EXTRACT(EPOCH FROM timestamp_sensor)) as \"time\"\nFROM \n    etlocationuser\n    WHERE\n    user_id IN ($user_id )\nGROUP BY \n    x1, \n    x2, \n    y1, \n    y2",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Heatmap matriz",
      "type": "heatmap"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "ddfnqgvmg1g5cd"
      },
      "description": "Se usan colores o tamaños de puntos para representar el nivel de incertidumbre en las mediciones donde los puntos con una incertidumbre baja son más grandes y de un color más intenso que los puntos con una incertidumbre alta.",
      "gridPos": {
        "h": 12,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 15,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const userColors = {\n  'A': '#ff5733', // rojo\n  'B': '#bb33ff', // verde\n  'C': '#3395ff'\n  // Agrega más colores y usuarios según sea necesario\n};\n\nconst series = data.series.map((s) => {\n  if (s.refId === 'A') {\n    console.log(\"series\", s);\n    let x = s.fields.find((f) => f.name === 'x').values.buffer ||\n      s.fields.find((f) => f.name === 'x').values;\n\n    let y = s.fields.find((f) => f.name === 'y').values.buffer ||\n      s.fields.find((f) => f.name === 'y').values;\n\n    let uncertain = s.fields.find((f) => f.name === 'uncertain').values.buffer ||\n      s.fields.find((f) => f.name === 'uncertain').values;\n\n    let userId = s.fields.find((f) => f.name === 'user_id').values.buffer ||\n      s.fields.find((f) => f.name === 'user_id').values;\n\n    // Mapear los valores de x y y a un array de pares [x, y]\n    let data = x.map((value, index) => [value, y[index], uncertain[index], userId[index]]);\n\n    return {\n      symbolSize: params => {\n        // Verificar si params.data está definido antes de intentar acceder a sus elementos\n        if (params) {\n          // Aquí puedes definir la lógica para determinar el tamaño del punto basado en el valor de uncertain\n          // Por ejemplo, si uncertain es mayor que un cierto umbral, el tamaño del punto podría ser mayor\n          return params[2] * 20; // Ajusta este valor según tus necesidades\n        } else {\n          return 20; // Valor por defecto si params.data no está definido\n        }\n      },\n      itemStyle: {\n        color: params => {\n          // Verificar si params.data está definido antes de intentar acceder a sus elementos\n          if (params && params.data && params.data[3]) {\n            // Usar el user_id para obtener el color del objeto userColors\n            return userColors[params.data[3]];\n          } else {\n            return '#000000'; // Color por defecto si no se encuentra un color para el user_id\n          }\n        }\n      },\n      data: data,\n      type: 'scatter'\n    };\n  }\n});\n\nreturn {\n  grid: {\n    bottom: \"5%\",\n    containLabel: true,\n    left: \"3%\",\n    right: \"4%\",\n    top: \"4%\"\n  },\n  xAxis: {\n    name: 'Nombre del eje X',\n    nameLocation: 'middle',\n    nameGap: 30,\n    splitLine: { show: false },\n  },\n\n  yAxis: {\n    name: 'Nombre del eje Y',\n    nameLocation: 'end',\n  },\n  legend: {\n    data: ['Nombre de la leyenda'] // Datos de la leyenda\n  },\n  series: series\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "json",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  grid: {\n    bottom: \"3%\",\n    containLabel: true,\n    left: \"3%\",\n    right: \"4%\",\n    top: \"4%\"\n  },\n  xAxis: {},\n  yAxis: {},\n  series: [\n    {\n      symbolSize: 20,\n      data: [\n        [10.0, 8.04],\n        [8.07, 6.95],\n        [13.0, 7.58],\n        [9.05, 8.81],\n        [11.0, 8.33],\n        [14.0, 7.66],\n        [13.4, 6.81],\n        [10.0, 6.33],\n        [14.0, 8.96],\n        [12.5, 6.82],\n        [9.15, 7.2],\n        [11.5, 7.2],\n        [3.03, 4.23],\n        [12.2, 7.83],\n        [2.02, 4.47],\n        [1.05, 3.33],\n        [4.05, 4.96],\n        [6.03, 7.24],\n        [12.0, 6.26],\n        [12.0, 8.84],\n        [7.08, 5.82],\n        [5.02, 5.68]\n      ],\n      type: 'scatter'\n    }\n  ]\n};",
          "codeHeight": 600,
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "5.3.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "cdevgudbahypse"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) as \"time\",\n  x1 as \"x\",\n  y1 as \"y\",\n  uncertain,\n  user_id as \"user_id\"\nFROM\n  etlocationuser\nWHERE\n  user_id IN ($user_id) AND $__timeFilter(timestamp_sensor)\nGROUP BY\n  time,\n  x1,\n  y1,\n  uncertain,\n  user_id\nORDER BY\n  time ASC",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Visualización de Incertidumbre",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "ddfnqgvmg1g5cd"
      },
      "flowchartsData": {
        "flowcharts": [
          {
            "allowDrawio": false,
            "center": true,
            "csv": "## See more information for the syntax at https://drawio-app.com/import-from-csv-to-drawio/\n##\n## Example CSV. Use ## for comments and # for configuration.\n## The following names are reserved and should not be used (or ignored):\n## id, tooltip, placeholder(s), link and label (see below)\n##\n#\n## Node label with placeholders and HTML.\n## Default is '%name_of_first_column%'.\n#\n# label: %name%<br><i style=\"color:gray;\">%position%</i><br><a href=\"mailto:%email%\">Email</a>\n#\n## Node style (placeholders are replaced once).\n## Default is the current style for nodes.\n#\n# style: label;image=%image%;whiteSpace=wrap;html=1;rounded=1;fillColor=%fill%;strokeColor=%stroke%;\n#\n## Parent style for nodes with child nodes (placeholders are replaced once).\n#\n# parentstyle: swimlane;whiteSpace=wrap;html=1;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;\n#\n## Optional column name that contains a reference to a named style in styles.\n## Default is the current style for nodes.\n#\n# stylename: -\n#\n## JSON for named styles of the form {\"name\": \"style\", \"name\": \"style\"} where style is a cell style with\n## placeholders that are replaced once.\n#\n# styles: -\n#\n## Optional column name that contains a reference to a named label in labels.\n## Default is the current label.\n#\n# labelname: -\n#\n## JSON for named labels of the form {\"name\": \"label\", \"name\": \"label\"} where label is a cell label with\n## placeholders.\n#\n# labels: -\n#\n## Uses the given column name as the identity for cells (updates existing cells).\n## Default is no identity (empty value or -).\n#\n# identity: -\n#\n## Uses the given column name as the parent reference for cells. Default is no parent (empty or -).\n## The identity above is used for resolving the reference so it must be specified.\n#\n# parent: -\n#\n## Adds a prefix to the identity of cells to make sure they do not collide with existing cells (whose\n## IDs are numbers from 0..n, sometimes with a GUID prefix in the context of realtime collaboration).\n## Default is csvimport-.\n#\n# namespace: csvimport-\n#\n## Connections between rows (\"from\": source colum, \"to\": target column).\n## Label, style and invert are optional. Defaults are '', current style and false.\n## If placeholders are used in the style, they are replaced with data from the source.\n## An optional placeholders can be set to target to use data from the target instead.\n## In addition to label, an optional fromlabel and tolabel can be used to name the column\n## that contains the text for the label in the edges source or target (invert ignored).\n## The label is concatenated in the form fromlabel + label + tolabel if all are defined.\n## The target column may contain a comma-separated list of values.\n## Multiple connect entries are allowed.\n#\n# connect: {\"from\": \"manager\", \"to\": \"name\", \"invert\": true, \"label\": \"manages\", \\\n#          \"style\": \"curved=1;endArrow=blockThin;endFill=1;fontSize=11;\"}\n# connect: {\"from\": \"refs\", \"to\": \"id\", \"style\": \"curved=1;fontSize=11;\"}\n#\n## Node x-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# left: \n#\n## Node y-coordinate. Possible value is a column name. Default is empty. Layouts will\n## override this value.\n#\n# top: \n#\n## Node width. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the width. Default is auto.\n#\n# width: auto\n#\n## Node height. Possible value is a number (in px), auto or an @ sign followed by a column\n## name that contains the value for the height. Default is auto.\n#\n# height: auto\n#\n## Padding for autosize. Default is 0.\n#\n# padding: -12\n#\n## Comma-separated list of ignored columns for metadata. (These can be\n## used for connections and styles but will not be added as metadata.)\n#\n# ignore: id,image,fill,stroke,refs,manager\n#\n## Column to be renamed to link attribute (used as link).\n#\n# link: url\n#\n## Spacing between nodes. Default is 40.\n#\n# nodespacing: 40\n#\n## Spacing between levels of hierarchical layouts. Default is 100.\n#\n# levelspacing: 100\n#\n## Spacing between parallel edges. Default is 40. Use 0 to disable.\n#\n# edgespacing: 40\n#\n## Name or JSON of layout. Possible values are auto, none, verticaltree, horizontaltree,\n## verticalflow, horizontalflow, organic, circle or a JSON string as used in Layout, Apply.\n## Default is auto.\n#\n# layout: auto\n#\n## ---- CSV below this line. First line are column names. ----\nname,position,id,location,manager,email,fill,stroke,refs,url,image\nEvan Miller,CFO,emi,Office 1,,me@example.com,#dae8fc,#6c8ebf,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-9-2-128.png\nEdward Morrison,Brand Manager,emo,Office 2,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-10-3-128.png\nRon Donovan,System Admin,rdo,Office 3,Evan Miller,me@example.com,#d5e8d4,#82b366,\"emo,tva\",https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-2-128.png\nTessa Valet,HR Director,tva,Office 4,Evan Miller,me@example.com,#d5e8d4,#82b366,,https://www.draw.io,https://cdn3.iconfinder.com/data/icons/user-avatars-1/512/users-3-128.png\n",
            "download": false,
            "editorTheme": "dark",
            "editorUrl": "https://www.draw.io",
            "enableAnim": true,
            "grid": false,
            "lock": true,
            "name": "Main",
            "scale": true,
            "tooltip": true,
            "type": "xml",
            "url": "http://<YourUrl>/<Your XML/drawio file/api>",
            "xml": "<mxfile host=\"www.draw.io\" modified=\"2020-05-21T20:14:29.859Z\" agent=\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36\" etag=\"rwy50rCb7z9LxghqXC2E\" version=\"13.1.3\"><diagram id=\"yTSrfheXbhThAiSCHX68\" name=\"Page-1\">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</diagram></mxfile>",
            "zoom": "100%"
          }
        ]
      },
      "format": "short",
      "graphId": "flowchart_18",
      "gridPos": {
        "h": 12,
        "w": 11,
        "x": 12,
        "y": 8
      },
      "id": 18,
      "newFlag": false,
      "rulesData": {
        "rulesData": [
          {
            "aggregation": "current",
            "alias": "P5",
            "colors": [
              "#5794F2",
              "#5794F2",
              "#73BF69",
              "#FADE2A",
              "#F2495C"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": true,
            "hidden": false,
            "invert": true,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "serie",
            "order": 1,
            "overlayIcon": false,
            "pattern": "P5",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [
              {
                "colorOn": "a",
                "hidden": false,
                "pattern": "167",
                "style": "fillColor"
              }
            ],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [],
            "textData": [
              {
                "hidden": false,
                "pattern": "167",
                "textOn": "wmd",
                "textPattern": "/.*/",
                "textReplace": "content"
              }
            ],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              0.25,
              0.5,
              0.75,
              1
            ],
            "tooltip": true,
            "tooltipColors": false,
            "tooltipLabel": "ROOM 5",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": true,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "percent",
            "valueData": []
          },
          {
            "aggregation": "current",
            "alias": "P4",
            "colors": [
              "#5794F2",
              "#5794F2",
              "#73BF69",
              "#FADE2A",
              "#F2495C"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": true,
            "hidden": false,
            "invert": true,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "serie",
            "order": 2,
            "overlayIcon": false,
            "pattern": "P4",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [
              {
                "colorOn": "a",
                "hidden": false,
                "pattern": "166",
                "style": "fillColor"
              }
            ],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [
              {
                "hidden": false,
                "pattern": "166",
                "textOn": "wmd",
                "textPattern": "/.*/",
                "textReplace": "content"
              }
            ],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              0.25,
              0.5,
              0.75,
              1
            ],
            "tooltip": true,
            "tooltipColors": false,
            "tooltipLabel": "ROOM 4",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": true,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "percent",
            "valueData": []
          },
          {
            "aggregation": "current",
            "alias": "P3",
            "colors": [
              "#5794F2",
              "#5794F2",
              "#73BF69",
              "#FADE2A",
              "#F2495C"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": true,
            "hidden": false,
            "invert": true,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "serie",
            "order": 3,
            "overlayIcon": false,
            "pattern": "P3",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [
              {
                "colorOn": "a",
                "hidden": false,
                "pattern": "z4AA9EEG8jXJs2W3tZlR-168",
                "style": "fillColor"
              }
            ],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [
              {
                "hidden": false,
                "pattern": "z4AA9EEG8jXJs2W3tZlR-168",
                "textOn": "wmd",
                "textPattern": "/.*/",
                "textReplace": "content"
              }
            ],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              0.25,
              0.5,
              0.75,
              1
            ],
            "tooltip": true,
            "tooltipColors": true,
            "tooltipLabel": "ROOM 3",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": true,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "percent",
            "valueData": []
          },
          {
            "aggregation": "current",
            "alias": "P2",
            "colors": [
              "#5794F2",
              "#5794F2",
              "#73BF69",
              "#FADE2A",
              "#F2495C"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": true,
            "hidden": false,
            "invert": true,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "serie",
            "order": 4,
            "overlayIcon": false,
            "pattern": "P2",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [
              {
                "colorOn": "a",
                "hidden": false,
                "pattern": "z4AA9EEG8jXJs2W3tZlR-167",
                "style": "fillColor"
              }
            ],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [
              {
                "hidden": false,
                "pattern": "z4AA9EEG8jXJs2W3tZlR-167",
                "textOn": "wmd",
                "textPattern": "/.*/",
                "textReplace": "content"
              }
            ],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              0.25,
              0.5,
              0.75,
              1
            ],
            "tooltip": true,
            "tooltipColors": true,
            "tooltipLabel": "ROOM 2",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": true,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "percent",
            "valueData": []
          },
          {
            "aggregation": "current",
            "alias": "P1",
            "colors": [
              "#5794F2",
              "#5794F2",
              "#73BF69",
              "#FADE2A",
              "#F2495C"
            ],
            "column": "Time",
            "dateFormat": "YYYY-MM-DD HH:mm:ss",
            "decimals": 2,
            "eventData": [],
            "eventProp": "id",
            "eventRegEx": false,
            "gradient": true,
            "hidden": false,
            "invert": true,
            "linkData": [],
            "linkProp": "id",
            "linkRegEx": true,
            "mappingType": 1,
            "metricType": "serie",
            "order": 5,
            "overlayIcon": false,
            "pattern": "P1",
            "rangeData": [],
            "reduce": true,
            "refId": "A",
            "sanitize": false,
            "shapeData": [
              {
                "colorOn": "a",
                "hidden": false,
                "pattern": "164",
                "style": "fillColor"
              },
              {
                "colorOn": "a",
                "hidden": false,
                "pattern": "163",
                "style": "fillColor"
              },
              {
                "colorOn": "a",
                "hidden": false,
                "pattern": "165",
                "style": "fillColor"
              }
            ],
            "shapeProp": "id",
            "shapeRegEx": true,
            "stringThresholds": [
              "/.*/",
              "/.*/"
            ],
            "textData": [
              {
                "hidden": false,
                "pattern": "165",
                "textOn": "wmd",
                "textPattern": "/.*/",
                "textReplace": "content"
              }
            ],
            "textProp": "id",
            "textRegEx": true,
            "thresholds": [
              0.25,
              0.5,
              0.75,
              1
            ],
            "tooltip": true,
            "tooltipColors": true,
            "tooltipLabel": "ROOM 1",
            "tooltipOn": "a",
            "tpDirection": "v",
            "tpGraph": true,
            "tpGraphScale": "linear",
            "tpGraphSize": "100%",
            "tpGraphType": "line",
            "type": "number",
            "unit": "percent",
            "valueData": []
          }
        ]
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "e29304bc-c109-495f-8105-83d9911b53c3"
          },
          "editorMode": "code",
          "format": "time_series",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT \n  date_trunc('$timeRange', timestamp_sensor) AS \"time\", \n  uncertain AS \"P1\" \nFROM \n  etlocationuser\nWHERE \n  $__timeFilter(timestamp_sensor) AND\n  (x1 BETWEEN 0 AND 25) AND \n  (x2 BETWEEN 0 AND 25) AND \n  (y1 BETWEEN 0 AND 25) AND \n  (y2 BETWEEN 0 AND 25)\nGROUP BY\n  time,\n  uncertain\nORDER BY\n  time ASC",
          "refId": "P1",
          "sql": {
            "columns": [],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "e29304bc-c109-495f-8105-83d9911b53c3"
          },
          "editorMode": "code",
          "format": "time_series",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) AS \"time\",\n  uncertain AS \"P2\"\nFROM\n  etlocationuser\nWHERE\n  $__timeFilter(timestamp_sensor)\n  AND (\n    x1 BETWEEN 26\n    AND 50\n  )\n  AND (\n    x2 BETWEEN 26\n    AND 50\n  )\n  AND (\n    y1 BETWEEN 0\n    AND 25\n  )\n  AND (\n    y2 BETWEEN 0\n    AND 25\n  )\nGROUP BY\n  time,\n  uncertain\nORDER BY\n  time ASC",
          "refId": "P2",
          "sql": {
            "columns": [],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "e29304bc-c109-495f-8105-83d9911b53c3"
          },
          "editorMode": "code",
          "format": "time_series",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) AS \"time\",\n  uncertain AS \"P3\"\nFROM\n  etlocationuser\nWHERE\n  $__timeFilter(timestamp_sensor)\n  AND (\n    x1 BETWEEN 26\n    AND 50\n  )\n  AND (\n    x2 BETWEEN 26\n    AND 50\n  )\n  AND (\n    y1 BETWEEN 26\n    AND 50\n  )\n  AND (\n    y2 BETWEEN 26\n    AND 50\n  )\nGROUP BY\n  time,\n  uncertain\nORDER BY\n  time ASC",
          "refId": "P3",
          "sql": {
            "columns": [],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "e29304bc-c109-495f-8105-83d9911b53c3"
          },
          "editorMode": "code",
          "format": "time_series",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) AS \"time\",\n  uncertain AS \"P4\"\nFROM\n  etlocationuser\nWHERE\n  $__timeFilter(timestamp_sensor)\n  AND (\n    x1 BETWEEN 51\n    AND 100\n  )\n  AND (\n    x2 BETWEEN 51\n    AND 100\n  )\n  AND (\n    y1 BETWEEN 26\n    AND 50\n  )\n  AND (\n    y2 BETWEEN 26\n    AND 50\n  )\nGROUP BY\n  time,\n  uncertain\nORDER BY\n  time ASC",
          "refId": "P4",
          "sql": {
            "columns": [],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "e29304bc-c109-495f-8105-83d9911b53c3"
          },
          "editorMode": "code",
          "format": "time_series",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) AS \"time\",\n  uncertain AS \"P5\"\nFROM\n  etlocationuser\nWHERE\n  $__timeFilter(timestamp_sensor)\n  AND (\n    x1 BETWEEN 51\n    AND 100\n  )\n  AND (\n    x2 BETWEEN 51\n    AND 100\n  )\n  AND (\n    y1 BETWEEN 51\n    AND 100\n  )\n  AND (\n    y2 BETWEEN 51\n    AND 100\n  )\nGROUP BY\n  time,\n  uncertain\nORDER BY\n  time ASC",
          "refId": "P5",
          "sql": {
            "columns": [],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Panel Title",
      "type": "agenty-flowcharting-panel",
      "valueName": "current",
      "version": "0.9.0"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "ddfnqgvmg1g5cd"
      },
      "description": "densidad de puntos en un área específica. Este tipo de visualización te ayudaría a identificar áreas donde hay una mayor concentración de datos.",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "scaleDistribution": {
              "type": "linear"
            }
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 14,
        "w": 12,
        "x": 0,
        "y": 20
      },
      "id": 2,
      "options": {
        "calculate": true,
        "calculation": {
          "yBuckets": {
            "scale": {
              "log": 2,
              "type": "log"
            }
          }
        },
        "cellGap": 1,
        "color": {
          "exponent": 0.5,
          "fill": "dark-orange",
          "mode": "scheme",
          "reverse": false,
          "scale": "exponential",
          "scheme": "Oranges",
          "steps": 60
        },
        "exemplars": {
          "color": "rgba(255,0,255,0.7)"
        },
        "filterValues": {
          "le": 1e-9
        },
        "legend": {
          "show": true
        },
        "rowsFrame": {
          "layout": "auto"
        },
        "tooltip": {
          "mode": "single",
          "showColorScale": false,
          "yHistogram": false
        },
        "yAxis": {
          "axisPlacement": "left",
          "reverse": false
        }
      },
      "pluginVersion": "10.4.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "e29304bc-c109-495f-8105-83d9911b53c3"
          },
          "editorMode": "code",
          "format": "time_series",
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) AS \"time\",\n  COUNT(*) AS \"value\",\n  y1 AS \"latitude\",\n  x1 AS \"longitude\"\nFROM\n  etlocationuser\nWHERE\n  $__timeFilter(timestamp_sensor)\nGROUP BY\n  time,\n  y1,\n  x1\nORDER BY\n  time ASC",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "HeatMap",
      "type": "heatmap"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "ddfnqgvmg1g5cd"
      },
      "description": "Gaussiana: esta visualización utiliza una distribución gaussiana (o normal) para representar los datos. Es una curva suave con forma de campana donde el pico representa el valor más común y el ancho de la \"campana\" muestra cuánta variación hay en los datos. Esto es útil para mostrar cuánto varía una métrica con respecto al promedio.",
      "gridPos": {
        "h": 14,
        "w": 12,
        "x": 12,
        "y": 20
      },
      "id": 9,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 600
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "let values = [];\n\nconst series = data.series.map((s) => {\n  if (s.refId === 'A') {\n    let uncertain = s.fields.find((f) => f.name === 'uncertain').values.buffer ||\n      s.fields.find((f) => f.name === 'uncertain').values;\n    let x1 = s.fields.find((f) => f.name === 'x1').values.buffer ||\n      s.fields.find((f) => f.name === 'x1').values;\n    let x2 = s.fields.find((f) => f.name === 'x2').values.buffer ||\n      s.fields.find((f) => f.name === 'x2').values;\n    let y1 = s.fields.find((f) => f.name === 'y1').values.buffer ||\n      s.fields.find((f) => f.name === 'y1').values;\n    let y2 = s.fields.find((f) => f.name === 'y2').values.buffer ||\n      s.fields.find((f) => f.name === 'y2').values;\n\n    // Asumiendo que todos los arrays tienen la misma longitud\n    for (let i = 0; i < uncertain.length; i++) {\n      let avgX = x1[i];\n      let avgY = y1[i];\n      values.push([avgX, avgY, uncertain[i]]);\n    }\n  }\n});\n\nlet xCoords = [...new Set(values.map(v => v[0]))]; // Extrae todas las coordenadas x únicas\nlet yCoords = [...new Set(values.map(v => v[1]))]; // Extrae todas las coordenadas y únicas\n\n// Cambia la forma en que generas tus values para que se correspondan con las coordenadas x y y\nlet heatmapData = values.map(v => [xCoords.indexOf(v[0]), yCoords.indexOf(v[1]), v[2]]);\n\nreturn {\n  tooltip: {\n    position: 'top'\n  },\n  grid: {\n    height: '50%',\n    top: '10%'\n  },\n  xAxis: {\n    type: 'category',\n    data: xCoords,\n    /* splitArea: {\n      show: true\n    } */\n  },\n  yAxis: {\n    type: 'category',\n    data: yCoords,\n    /* splitArea: {\n      show: true\n    } */\n  },\n  visualMap: {\n    min: 0,\n    max: 1,\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '15%',\n    calculable: true,\n    realtime: false,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  series: [\n    {\n      name: 'Gaussian',\n      type: 'heatmap',\n      data: heatmapData,\n      /* label: {\n        show: true\n      }, */\n      emphasis: {\n        itemStyle: {\n          borderColor: '#333',\n          borderWidth: 1\n        }\n      },\n      progressive: 1000,\n      animation: false\n    }\n  ]\n};\n\n\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        },
        "visualEditor": {
          "code": "let values = [];\n\nconst series = data.series.map((s) => {\n  if (s.refId === 'A') {\n    let uncertain = s.fields.find((f) => f.name === 'uncertain').values.buffer ||\n      s.fields.find((f) => f.name === 'uncertain').values;\n    let x1 = s.fields.find((f) => f.name === 'x1').values.buffer ||\n      s.fields.find((f) => f.name === 'x1').values;\n    let x2 = s.fields.find((f) => f.name === 'x2').values.buffer ||\n      s.fields.find((f) => f.name === 'x2').values;\n    let y1 = s.fields.find((f) => f.name === 'y1').values.buffer ||\n      s.fields.find((f) => f.name === 'y1').values;\n    let y2 = s.fields.find((f) => f.name === 'y2').values.buffer ||\n      s.fields.find((f) => f.name === 'y2').values;\n\n    // Asumiendo que todos los arrays tienen la misma longitud\n    for (let i = 0; i < uncertain.length; i++) {\n      let avgX = (x1[i] + x2[i]) / 2;\n      let avgY = (y1[i] + y2[i]) / 2;\n      values.push([avgX, avgY, uncertain[i]]);\n    }\n  }\n});\n\nlet xCoords = [...new Set(values.map(v => v[0]))]; // Extrae todas las coordenadas x únicas\nlet yCoords = [...new Set(values.map(v => v[1]))]; // Extrae todas las coordenadas y únicas\n\n// Cambia la forma en que generas tus values para que se correspondan con las coordenadas x y y\nlet heatmapData = values.map(v => [xCoords.indexOf(v[0]), yCoords.indexOf(v[1]), v[2]]);\n\nreturn {\n  tooltip: {\n    position: 'top'\n  },\n  grid: {\n    height: '50%',\n    top: '10%'\n  },\n  xAxis: {\n    type: 'category',\n    data: xCoords,\n    splitArea: {\n      show: true\n    }\n  },\n  yAxis: {\n    type: 'category',\n    data: yCoords,\n    splitArea: {\n      show: true\n    }\n  },\n  visualMap: {\n    min: 0,\n    max: 1,\n    calculable: true,\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '15%'\n  },\n  series: [\n    {\n      name: 'Punch Card',\n      type: 'heatmap',\n      data: heatmapData,\n      /* label: {\n        show: true\n      }, */\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    }\n  ]\n};",
          "codeHeight": 600,
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "5.3.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "cdevgudbahypse"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\ndate_trunc('$timeRange', timestamp_sensor) AS \"time\", \n  x1 as x1,\n  x2 as x2,\n  y1 as y1,\n  y2 as y2, \n  uncertain\nFROM\n  etlocationuser\nWHERE\n  $__timeFilter(timestamp_sensor) AND user_id IN ($user_id)\nGROUP BY\n  time,\n  x1,\n  x2,\n  y1,\n  y2,\n  uncertain\nORDER BY\n  time ",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Heatmap v3 -> Gaussian",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "ddfnqgvmg1g5cd"
      },
      "description": "Eje x es una media de x1, x2\nEje Y es una media de y1,y2",
      "gridPos": {
        "h": 14,
        "w": 24,
        "x": 0,
        "y": 34
      },
      "id": 10,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 771
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "console.log('console Data >> ', data)\nlet x1, x2, y1, y2, timestamp_sensor, avgX, avgY;\ndata.series.map((s) => {\n\n  if (s.refId === 'A') {\n    x1 = s.fields.find((f) => f.name === 'x1').values.buffer ||\n      s.fields.find((f) => f.name === 'x1').values;\n    x2 = s.fields.find((f) => f.name === 'x2').values.buffer ||\n      s.fields.find((f) => f.name === 'x2').values;\n    y1 = s.fields.find((f) => f.name === 'y1').values.buffer ||\n      s.fields.find((f) => f.name === 'y1').values;\n    y2 = s.fields.find((f) => f.name === 'y2').values.buffer ||\n      s.fields.find((f) => f.name === 'y2').values;\n    timestamp_sensor = s.fields.find((f) => f.name === 'time').values.buffer ||\n      s.fields.find((f) => f.name === 'time').values;\n\n    // Calcular la media de x1, x2 y y1, y2\n    avgX = x1.map((val, i) => (val + x2[i]) / 2);\n    avgY = y1.map((val, i) => (val + y2[i]) / 2);\n\n    // Convertir cada timestamp a fecha legible\n    timestamp_sensor = timestamp_sensor.map(ts => {\n      let date = new Date(ts);\n      let day = String(date.getDate()).padStart(2, '0');\n      let month = String(date.getMonth() + 1).padStart(2, '0'); // Los meses en JavaScript empiezan en 0\n      let year = date.getFullYear();\n      let hours = String(date.getHours()).padStart(2, '0');\n      let minutes = String(date.getMinutes()).padStart(2, '0');\n      let seconds = String(date.getSeconds()).padStart(2, '0');\n\n      return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;\n    });\n  }\n});\n\n\n\nconsole.log('console x1 >> ', timestamp_sensor)\n\nreturn {\n  grid: {\n    bottom: \"80\",\n    containLabel: true,\n    left: \"3%\",\n  },\n  legend: {},\n  series: [\n    {\n      areaStyle: {},\n      data: avgX,\n      emphasis: {\n        focus: \"series\"\n      },\n      name: \"avgX\",\n      stack: \"Total\",\n      type: \"line\"\n    },\n    {\n      areaStyle: {},\n      data: avgY,\n      emphasis: {\n        focus: \"series\"\n      },\n      name: \"avgY\",\n      stack: \"Total\",\n      type: \"line\"\n    },\n\n  ],\n  toolbox: {\n    orient: 'vertical',\n    left: 'right',\n    top: 'center',\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  tooltip: {\n    axisPointer: {\n      label: {\n        backgroundColor: \"#6a7985\"\n      },\n      type: \"cross\"\n    },\n    trigger: \"axis\"\n  },\n  xAxis: [\n    {\n      boundaryGap: false,\n      data: timestamp_sensor.map(function (str) {\n        return str.replace(' ', '\\n');\n      }),\n      type: \"category\"\n    }\n  ],\n  yAxis: [\n    {\n      type: \"value\"\n    }\n  ],\n  dataZoom: [\n    {\n      show: true,\n      realtime: true,\n      start: 65,\n      end: 85\n    },\n    {\n      type: 'inside',\n      realtime: true,\n      start: 65,\n      end: 85\n    }\n  ],\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "height": 400,
          "name": "default"
        },
        "visualEditor": {
          "code": "console.log(context);\nreturn {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "codeHeight": 600,
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "5.3.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "e29304bc-c109-495f-8105-83d9911b53c3"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) AS \"time\",\n  x1,\n  x2,\n  y1,\n  y2\nFROM\n  etlocationuser\nWHERE\n  $__timeFilter(timestamp_sensor)\n  AND user_id IN ($user_id)\nGROUP BY\n  time,\n  x1,\n  x2,\n  y1,\n  y2\nORDER BY\n  time ASC",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Grafico de lineas",
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "ddfnqgvmg1g5cd"
      },
      "description": "muestren la actividad de los usuarios en función del tiempo o de otras variables relevantes. Esto te permitiría analizar el comportamiento de los usuarios en diferentes áreas. Puedes utilizar un gráfico de barras para visualizar la cantidad de registros de sensores por usuario, por hora del día o por área específica de la casa.",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "displayName": "Contador",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "#EAB839",
                "value": 50
              },
              {
                "color": "purple",
                "value": 100
              },
              {
                "color": "#6ED0E0",
                "value": 150
              },
              {
                "color": "#EF843C",
                "value": 200
              },
              {
                "color": "#E24D42",
                "value": 300
              },
              {
                "color": "#1F78C1",
                "value": 400
              },
              {
                "color": "#BA43A9",
                "value": 500
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 16,
        "w": 24,
        "x": 0,
        "y": 48
      },
      "id": 3,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "colorByField": "activity",
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        },
        "xField": "time",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "10.3.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "e29304bc-c109-495f-8105-83d9911b53c3"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) AS \"time\", \n  user_id,\n  COUNT(*) AS activity\nFROM\n  etlocationuser\nWHERE $__timeFilter(timestamp_sensor) AND user_id IN ($user_id)\nGROUP BY\n  time,\n  user_id\nORDER BY\n  time;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Gráficos de Barras o Líneas con Filtros de Usuarios",
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "ddfnqgvmg1g5cd"
      },
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "entity_id"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 275
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "timestamp_sensor"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 273
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "time"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 296
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 64
      },
      "id": 1,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "10.4.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "e29304bc-c109-495f-8105-83d9911b53c3"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n  date_trunc('$timeRange', timestamp_sensor) AS \"time\",\n  entity_id,\n  x1,\n  x2,\n  y1,\n  y2,\n  uncertain,\n  user_id\nFROM\n  etlocationuser\nWHERE\n  $__timeFilter(timestamp_sensor)\n  AND user_id IN ($user_id)\nGROUP BY\n  time,\n  entity_id,\n  x1,\n  x2,\n  y1,\n  y2,\n  uncertain,\n  user_id\nORDER BY\n  time ASC",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Panel Title",
      "type": "table"
    }
  ],
  "refresh": "",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "ddfnqgvmg1g5cd"
        },
        "definition": "SELECT user_id FROM etlocationuser",
        "hide": 0,
        "includeAll": true,
        "label": "ID usuario",
        "multi": true,
        "name": "user_id",
        "options": [],
        "query": "SELECT user_id FROM etlocationuser",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "hour",
          "value": "hour"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Granularidad",
        "multi": false,
        "name": "timeRange",
        "options": [
          {
            "selected": true,
            "text": "hour",
            "value": "hour"
          },
          {
            "selected": false,
            "text": "day",
            "value": "day"
          },
          {
            "selected": false,
            "text": "week",
            "value": "week"
          },
          {
            "selected": false,
            "text": "month",
            "value": "month"
          }
        ],
        "query": "hour, day, week, month",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now/y",
    "to": "now/y"
  },
  "timepicker": {
    "hidden": false
  },
  "timezone": "",
  "title": "Sensores de localización",
  "uid": "a755de72-d8b9-42a8-86d4-53b2d2c378a3",
  "version": 25,
  "weekStart": ""
}